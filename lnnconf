#!/usr/bin/env bash

function resolve_cmd() {
  cmd="$1"
  case "$cmd" in
    s | add)      cmd=save;;
    l | ls)       cmd=list;;
    a | load)     cmd=apply;;
    d | del | rm) cmd=delete;;
    h | '?')      cmd=help;;
    q | quit)     cmd=exit;;
  esac
  echo $cmd
}

function run_cmd() {
  cmd="$1"
  shift
  set -- $(resolve_cmd "$cmd") "$@"
  cmd="$1"
  shift

  if [ ! "$cmd" ]; then
    return
  elif [ "$cmd" = "help" -o "$cmd" = "h" ]; then
    if [ $# -gt 1 ]; then
      echo "Too many arguments" >&2
      return 1
    elif [ $# -eq 1 ]; then
      set -- $(resolve_cmd $0)
      case "$1" in
        save)
          echo "\
save [options...] [--] <name> [entry...]
  Save a new configuration.

  Aliases: s, add

  Parameters:
    name    Name of the new configuration.
            Must not be the same as an existing saved configuration.
    entry   Names of files and directories to include.
            Defaults to 'img'.
            All specified entries must exist.
            'config.json' is implicitly included unless --no-config-json is
            specified. To include only 'config.json' and not 'img', pass
            'config.json'.
  Options:
    --no-config-json  Do not include config.json in the saved configuration.

  Example:
    ${mespc}save myconfig img/standard Resources config.json" >&2
        ;;
        list)
          echo "\
list
  List saved configurations.

  Aliases: l, ls">&2
        ;;
        apply)
          echo "\
apply <name>
  Apply a configuration.
  This may delete some of the existing files on disk.

  Alias: a, load" >&2
        ;;
        delete)
          echo "\
delete <name...>
  Delete saved configuration(s).

  Aliases: d, del, rm" >&2
        ;;
        help)
          echo "\
help [command]
  Show help.

  Aliases: h, ?" >&2
        ;;
        exit)
          echo "\
exit
  Exit lnnconf shell.

  Aliases: q, quit" >&2
        ;;
        *)
          echo "Unknown command '$1'" >&2
          return 1
      esac
    else
      if [ ! "$shell_mode" ]; then
        echo "Usage: $me <command> [args...]"$'\n' >&2
      fi
      echo "\
Commands:
save [options...] [--] <name> [entry...]  Save a new configuration
list   - - - - - - - - - - - - - - - - -  List saved configurations
apply <name>   - - - - - - - - - - - - -  Apply a configuration
delete <name...>   - - - - - - - - - - -  Delete saved configuration(s)
help [command]   - - - - - - - - - - - -  Show help" >&2
      if [ "$shell_mode" ]; then echo "\
exit   - - - - - - - - - - - - - - - - -  Exit lnnconf shell" >&2; fi
      echo $'\n'"Run “${mespc}help <command>” for details of a specific command" >&2
    fi
  elif [ "$cmd" = exit ]; then
    exit=1
  elif [ "$cmd " = '! ' ]; then
    "$SHELL"
  elif [ -f "$LNNCONFDIR/_$cmd.py" ]; then
    python "$LNNCONFDIR/_$cmd.py" "$@"
  else
    echo "Unknown command '$cmd'" >&2
    return 2
  fi
}

cd "$(dirname "$0")"

LNNCONFDIR="$(dirname "$0")/_lnnconf"
exit_stat=0
if [ "$1" ]; then
  me="./$(ls --quoting-style=shell "$(basename "$0")")"
  mespc="$me "
  run_cmd "$@"
else
  shell_mode=1
  while
    trap '' SIGINT
    reply="$(
      trap 'echo; exit' SIGINT
      read -ep $'\nlnnconfshell> '
      stat=$?
      echo "$REPLY"
      exit $stat
    )"
    stat=$?
    trap - SIGINT
    [ $stat -eq 0 ]
  do
    run_cmd $reply
    if [ "$exit" ]; then
      exit $exit_stat
    fi
    exit_stat=$?
  done
  echo bye >&2
fi

